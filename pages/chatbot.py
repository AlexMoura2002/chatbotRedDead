import streamlit as st
import time
import fitz  # PyMuPDF para leitura do PDF
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from pages.utils import gerar_resposta
from firebase_utils import salvar_conversa, buscar_historico

st.set_page_config(page_title="Curiosidades Red Dead", layout="wide", page_icon="ü§†")

# Verifica se o usu√°rio est√° logado
if not st.session_state.get("usuario_logado"):
    st.warning("‚ö†Ô∏è Acesso negado! Fa√ßa login primeiro.")
    st.stop()

# Fun√ß√£o para extrair texto do PDF
def extrair_texto_pdf(pdf_path):
    texto = ""
    with fitz.open(pdf_path) as doc:
        for page in doc:
            texto += page.get_text("text") + "\n"
    return texto

# Fun√ß√£o para buscar resposta no PDF
def buscar_resposta_no_pdf(pergunta, conteudo_pdf):
    linhas = conteudo_pdf.split("\n")
    for i, linha in enumerate(linhas):
        if pergunta.lower() in linha.lower():
            return linhas[i + 1] if i + 1 < len(linhas) else "N√£o encontrei uma resposta exata, mas posso tentar ajudar!"
    return None

# Carregar conte√∫do do PDF
pdf_path = "Curiosidades_RedDead.pdf"
conteudo_pdf = extrair_texto_pdf(pdf_path)

# Cabe√ßalho
st.title("ü§† Curiosidades Red Dead")
st.caption("Chatbot sobre fatos e segredos do universo Red Dead Redemption")

# Inicializa hist√≥rico se n√£o existir
if "conversation_history" not in st.session_state:
    st.session_state.conversation_history = []

# Exibi√ß√£o do hist√≥rico
with st.expander("üìú Ver hist√≥rico"):
    historico = buscar_historico(st.session_state.uid)
    if historico:
        for item in historico[::-1]:
            st.markdown(f"üïí {item['hora']}")
            st.markdown(f"**Voc√™:** {item['pergunta']}")
            st.markdown(f"**Chatbot:** {item['resposta']}")
            st.markdown("---")
    else:
        st.info("Voc√™ ainda n√£o possui hist√≥rico de conversas.")

# Exibi√ß√£o do chat no formato correto
st.subheader("üí¨ Chat")

for msg in st.session_state.conversation_history:
    if msg["role"] == "user":
        st.markdown(f"üßë‚Äçüíª **Voc√™:** {msg['message']}")
    else:
        st.markdown(f"ü§ñ **Chatbot:** {msg['message']}")  

# Entrada do usu√°rio
with st.form(key="chat_form", clear_on_submit=True):
    user_input = st.text_area("Fa√ßa sua pergunta:", placeholder="Qual o segredo do cavalo lend√°rio?", height=100)
    submit_button = st.form_submit_button("Enviar")

# Processamento da pergunta
if submit_button and user_input:
    with st.spinner("Buscando resposta..."):
        st.markdown(f"üßë‚Äçüíª **Voc√™:** {user_input}")

        resposta = None  

        try:
            resposta = buscar_resposta_no_pdf(user_input, conteudo_pdf)

            # Se n√£o encontrou no PDF, usa a IA Gemini 1.5
            if not resposta:
                resposta = gerar_resposta(user_input)

            # üîπ Garante que a resposta seja string e processa quebras de linha corretamente
            resposta = str(resposta).strip().replace("\n", "  \n") if resposta else "Erro ao obter resposta."

            # üîπ Debug no console
            print(f"DEBUG - RESPOSTA COMPLETA:\n{resposta}")

            # üîπ Verificar tamanho da resposta
            if len(resposta) > 1000:
                print("‚ö†Ô∏è Resposta muito longa, exibindo em expander!")

            # üîπ Exibir resposta corretamente no chat
            with st.expander("ü§ñ Resposta do Chatbot:"):
                st.write(resposta, unsafe_allow_html=True)  

            # Salvar conversa no Firebase
            salvar_conversa(
                uid=st.session_state.uid,
                pergunta=user_input,
                resposta=resposta,
                hora=time.strftime("%d/%m/%Y %H:%M")
            )

            # Atualizar hist√≥rico
            st.session_state.conversation_history.append({"role": "user", "message": user_input})
            st.session_state.conversation_history.append({"role": "assistant", "message": resposta})

        except Exception as e:
            st.error(f"Erro ao gerar resposta: {e}")
            print(f"Erro: {e}")

        # Atualizar interface
        st.rerun()